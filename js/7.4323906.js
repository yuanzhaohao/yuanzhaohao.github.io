(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[7],{64:function(e,n){e.exports={markdown:'<h2>css 选择器优化</h2>\n<h4>浏览器如何识别你的选择器</h4>\n<p>首先我们需要清楚，浏览器是如何读取选择器，以识别样式，并将相应的样式附于对应的 HTML 元素，达到美化页面的效果。<a href="http://css-tricks.com/">Chris Coyier</a>曾在《<a href="http://css-tricks.com/efficiently-rendering-css/">Efficiently Rendering CSS</a>》一文中说过“浏览器读取你的选择器，遵循的原则是从选择器的右边到左边读取。换句话说，浏览器读取选择器的顺序是由右到左进行”。</p>\n<p>比如说：</p>\n<pre><code>div.nav &lt; ul li a[title]\n</code></pre>\n<p>上面的实例来说，浏览器首先会尝试在你的 HTML 标签中寻找<code>a[title]</code>元素，接着在匹配<code>li和ul</code>，最后在去匹配<code>div.nav</code>。这就是前成所主的“<strong>选择器从右到左的原则</strong>”。</p>\n<p>选择器的最后一部分，也就是选择器的最右边（在这个例子中就是<code>a[title]</code>部分）部分被称为“<strong>关键选择器</strong>”，它将决定你的选择器的效率如何？是高还是低。</p>\n<p>老版本的浏览器可以过滤掉不匹配的选择器，而直接匹配更高效的选择器。记得 David Hyatt 说过：“<strong>这个关键选择器可以大大提高选择器的性能，少检查一个给定的元素规则，就可以更有效的将样式匹配给对应的 HTML 元素。</strong>”那么如何让关键选择器更有效，性能化更高呢？其实很简单，主要把握一点“<strong>越具体的关键选择器，其性能越高</strong>”</p>\n<p>那么什么样类型的选择器，其性能高？什么样的类型的选择器性能低呢？下面我们就针对两个问题来展开具体的学习。</p>\n<h4>CSS 选择器的效率</h4>\n<p>比如我们常用的基本选择器元素标签选择器<code>div</code>、id 选择器<code>#header</code>、类选择器<code>.class</code>，或者说我们很少见的伪类选择器<code>:focus</code>以及更复杂的 css3 选择器<code>:nth-child</code>等等。</p>\n<p>选择器有一个固有的效率，我们来看 Steve Souders 给排的一个顺序：</p>\n<ul>\n<li>id 选择器（#myid）</li>\n<li>类选择器（.myclassname）</li>\n<li>标签选择器（div,h1,p）</li>\n<li>相邻选择器（h1+p）</li>\n<li>子选择器（ul &lt; li）</li>\n<li>后代选择器（li a）</li>\n<li>通配符选择器（*）</li>\n<li>属性选择器（a[rel=&quot;external&quot;]）</li>\n<li>伪类选择器（a:hover,li:nth-child）</li>\n</ul>\n<p>上面九种选择器的效率是从高到低排下来的，基中 ID 选择器的效率是最高，而伪类选择器的效率则是最底。详细的介绍大家还可以点击<a href="https://csswizardry.com/2011/09/writing-efficient-css-selectors/">Writing efficient CSS selectors</a>。</p>\n<p>综合上面的顺序，我们清楚的知道，id 和类名用于关键选择器上效率是最高的，而 CSS3 的仿伪类和属性选择器，虽然使用方便，但其效率却是最低的。我们下面一起来看几个实例的对比：<code>div #myid</code>度效率要比<code>myid div</code>高：</p>\n<p>第一种选择器比第二种选择器效率高，大家或许会问为什么？其实根据前面所介绍的我们就不难理解了，因为第一个选择器的“关键选择器”使用了“ID 选择器”， 而第二个选择器的“关键选择器”使用的是“标签选择器”，对比下来，“ID 选择器”效率高过“标签选择器”，所以说第一个选择器的效率要高于第二个选择 器。</p>\n<p>在类名或 ID 名前面加上标签也会致使选择器效率变低的，比如说：</p>\n<pre><code class="language-css">#myid.myclassname\n</code></pre>\n<p>这里的两个选择的效率要高于下面的选择器</p>\n<pre><code class="language-css">p#myidp.myclassname\n</code></pre>\n<h4>来自 Mozilla 的几点建议</h4>\n<p>在《<a href="https://gtmetrix.com/use-efficient-css-selectors.html">Use efficient CSS selectors</a>》中介绍了几种书写高效率的 CSS 选择器的方法，下面我将他们移到这里来让大家参考：</p>\n<ul>\n<li>避免普遍规则</li>\n<li>不要在 ID 选择器前加标签名或类名</li>\n<li>不要在类名选择器前加标签名</li>\n<li>尽可能使用具体的类别</li>\n<li>避免使用后代选择器</li>\n<li>标签分类规则中不应该包含一个子选择器</li>\n<li>子选择器的问题</li>\n<li>借助相关继承关系</li>\n<li>使用范围内的样式表</li>\n</ul>\n<h4>我们应该怎么做</h4>\n<p>前面说“ID 选择器”的效率是最高的，那么今天我们写样式，为了提高选择器的效率，是不是我们要在每一个文档的 HTML 元素中都加入 ID 名呢？我想这样的做 法是没有的。对于一个有语义的代码编写和如何提高性能，以前他们之间如何的平衡？其实这个选择器的效率低一点，对于大多数网站来说并不会有太大的影响，但对于一个大型的网站，产生大量的流量这就会有差别了，也就很值得我们去对他进行优化。那么我们就很有必要的去了解他们是如何工作，比如说，一般情况下哪些 选择器的使用效率更高。来看两个简单的例子：</p>\n<pre><code class="language-css">#myid\n</code></pre>\n<p>上面的选择器高于下面的：</p>\n<pre><code class="language-css">p#myid\n</code></pre>\n<p>后者的写法我发现还是有很多朋友这样写，但我不知道你为什么需要在 ID 前面加一个标签？难道你同一个页面会有多个相同的 ID 不成？</p>\n<p>我们接下来在来看一个实例，用于列表上的，比如说我们制作导航菜单的：</p>\n<pre><code class="language-css">#nav a\n</code></pre>\n<p>高效于：</p>\n<pre><code class="language-css">#nav li a\n</code></pre>\n<p>上面只是介绍了两个常碰到的实例，在这里说这两个实例，主要目的是让你在今后的编写样式时，能注意这方面的的细节，从而加快你的代码效率。</p>\n'}}}]);