(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[24],{81:function(n,t){n.exports={markdown:"<h2>seajs 基础篇</h2>\n<blockquote>\n<p>听说过<strong>模块化</strong>这个词已经很久了，之前暑假的时候，在达哥的介绍下，写了一些关于 seajs 的小 demo。最近趁着有空，上网查找了一些资料，对 Javascript 模块规范有了一些理解，另外把 seajs 重新看了一遍，所以就写写一些文章来总结最近的学习成果了！</p>\n</blockquote>\n<h4>模块化</h4>\n<p><strong>什么是模块？</strong></p>\n<p>在前端开发领域，一个模块，可以是 JS 模块，也可以是 CSS 模块，或是 Template 等模块。在 Sea.js 里，我们专注于 JS 模块（其他类型的模块可以转换为 JS 模块）：</p>\n<ul>\n<li>模块是一段 JavaScript 代码，具有统一的基本书写格式。</li>\n<li>模块之间通过基本交互规则，能彼此引用，协同工作。</li>\n</ul>\n<p>从上面模块的定义，我是这么理解 Javascript 模块化：按照统一的书写格式，将 Javascript 代码以模块进行组织，每一个模块互不干扰但可以相互引用（按需加载）。</p>\n<p><strong>Javascript 模块规范</strong></p>\n<p>目前，通行的 Javascript 模块规范共有两种：CommonJS、AMD 以及 CMD</p>\n<p><strong>服务器端</strong></p>\n<p>CommonJS 是针对服务器端的 nodejs 所设立的一个规范，在全局情况下，会有一个<code>require()</code>函数，用户加载模块。具体的用法如下：（其实我也不是很懂 nodejs，nodejs 也是一个相当火的东西呀，有空还是多接触比较好！）</p>\n<pre><code class=\"language-js\">var math = require('math');\nmath.add(2, 3);\n</code></pre>\n<p><strong>浏览器端</strong></p>\n<p>浏览器端主要是通过下面的方法实现模块化的：所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。有两大模块定义规范<strong>AMD</strong>和<strong>CMD</strong></p>\n<ul>\n<li>AMD（Asynchronous Module Definition）：异步模块定义。</li>\n<li>CMD（Common Module Definition）：通用模块定义。</li>\n</ul>\n<h4>AMD 与 CMD 的区别</h4>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</li>\n<li>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</li>\n</ul>\n<p>区别：</p>\n<ol>\n<li>\n<p>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.</p>\n</li>\n<li>\n<p>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</p>\n</li>\n</ol>\n<pre><code class=\"language-js\">   // CMD\n   define(function(require, exports, module) {\n       var a = require('./a') a.doSomething()\n       // 此处略去 100 行\n       var b = require('./b')\n       // 依赖可以就近书写\n       b.doSomething()\n       // ...\n    })\n\n   // AMD 默认推荐的是\n   define(['./a', './b'], function(a, b) {\n       // 依赖必须一开始就写好\n       a.doSomething()\n       // 此处略去 100 行\n       b.doSomething()\n       //...\n    })\n</code></pre>\n<p>虽然 AMD 也支持 CMD 的写法，同时还支持将 require 作为依赖项传递，但 RequireJS 的作者默认是最喜欢上面的写法，也是官方文档里默认的模块定义写法。</p>\n<ol start=\"3\">\n<li>AMD 的 API 默认是一个当多个用，CMD 的 API 严格区分，推崇职责单一。比如 AMD 里，require 分全局 require 和局部 require，都叫 require。CMD 里，没有全局 require，而是根据模块系统的完备性，提供 seajs.use 来实现模块系统的加载启动。CMD 里，每个 API 都简单纯粹。</li>\n</ol>\n<p>（呵呵，大牛不愧是大牛，果然给力吖！）</p>\n<h4>seajs 实现模块化</h4>\n<p>（以 highcharts 插件的一个实例为例！今天仅仅介绍最简单的用法，高手勿吐槽:)）</p>\n<p>目录结构如下：</p>\n<pre><code class=\"language-html\">// highcharts.html\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-CN&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;title&gt;highcharts的一次尝试使用模块化&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;container&quot; style=&quot;width: 600px; height: 400px; margin: 0 auto;&quot;&gt;&lt;/div&gt;\n\n    &lt;script src=&quot;lib/seajs/2.1.1/sea.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n      seajs.config({\n        base: './lib',\n        alias: {\n          jquery: 'jquery/jquery/1.10.1/jquery.js',\n          highcharts: 'highcharts/3.0.5/highcharts.js',\n          'highcharts-more': 'highcharts/3.0.5/highcharts-more.js',\n        },\n      });\n      seajs.use('./static/img//js/highcharts');\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>highcharts.js 里面使用 define 定义模块，利用<code>require()</code>方法把需要加载的类库加载进来</p>\n<pre><code class=\"language-js\">//highcharts.js\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n\n  $('#container').html('highcharts test');\n\n  require('highcharts');\n  require('highcharts-more');\n\n  $('#container').highcharts({\n    chart: {\n      type: 'bubble',\n      plotBorderWidth: 1,\n      zoomType: 'xy',\n    },\n\n    title: {\n      text: 'Highcharts bubbles with radial gradient fill',\n    },\n\n    xAxis: {\n      gridLineWidth: 1,\n    },\n\n    yAxis: {\n      startOnTick: false,\n      endOnTick: false,\n    },\n\n    series: [\n      {\n        data: [\n          [9, 81, 63],\n          [98, 5, 89],\n          [51, 50, 73],\n          [41, 22, 14],\n          [58, 24, 20],\n          [78, 37, 34],\n          [55, 56, 53],\n          [18, 45, 70],\n          [42, 44, 28],\n          [3, 52, 59],\n          [31, 18, 97],\n          [79, 91, 63],\n          [93, 23, 23],\n          [44, 83, 22],\n        ],\n        marker: {\n          fillColor: {\n            radialGradient: { cx: 0.4, cy: 0.3, r: 0.7 },\n            stops: [[0, 'rgba(255,255,255,0.5)'], [1, 'rgba(69,114,167,0.5)']],\n          },\n        },\n      },\n      {\n        data: [\n          [42, 38, 20],\n          [6, 18, 1],\n          [1, 93, 55],\n          [57, 2, 90],\n          [80, 76, 22],\n          [11, 74, 96],\n          [88, 56, 10],\n          [30, 47, 49],\n          [57, 62, 98],\n          [4, 16, 16],\n          [46, 10, 11],\n          [22, 87, 89],\n          [57, 91, 82],\n          [45, 15, 98],\n        ],\n        marker: {\n          fillColor: {\n            radialGradient: { cx: 0.4, cy: 0.3, r: 0.7 },\n            stops: [[0, 'rgba(255,255,255,0.5)'], [1, 'rgba(170,70,67,0.5)']],\n          },\n        },\n      },\n    ],\n  });\n});\n</code></pre>\n<p>用浏览器打开 highcharts.html，会出现下面的页面！</p>\n<p><img src=\"/static/img/seajs-highcharts.png\" alt=\"seajs-highcharts\"></p>\n"}}}]);