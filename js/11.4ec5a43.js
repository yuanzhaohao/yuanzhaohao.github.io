(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[11],{121:function(n,t){n.exports={markdown:"<h2>gruntjs 的使用</h2>\n<blockquote>\n<p>gruntjs 是 javascript 项目的构建工具，也是基于 nodejs 的一个命令行工具。现在很多开源的 js 项目都是基于它进行构建的。</p>\n</blockquote>\n<p>gruntjs 主要有以下一些作用：</p>\n<ul>\n<li>合并 js 文件</li>\n<li>压缩 js 文件</li>\n<li>单元测试（基于 QUnit）</li>\n<li>编译 less 等文件</li>\n</ul>\n<p>目前我只知道有以上一些作用，用起来感觉很牛逼的样子，不过，确实是很好用，很给力。</p>\n<h4>一、gruntjs 的安装</h4>\n<p>使用-g 进行全局安装 gruntjs，在命令行里面输入 <code>npm install -g grunt-cli</code> 当然，前提是要安装 nodejs，这个我这里就不说了（其实 nodejs 我也不太懂，有空可以研究研究，哈哈）</p>\n<p>下面我就按照官方提供的例子讲解吧（速战速决）！</p>\n<p>首先新建一个 gruntjs 目录（建了一个 gruntjs-again），在这个目录下面新建一个 package.json 的文件。在这个文件输入一段 json 格式的字符串</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;gruntjs-again&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;author&quot;: &quot;yzh&quot;,\n  &quot;description&quot;: &quot;gruntjs-again wonderfull&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;~0.4.1&quot;,\n    &quot;grunt-contrib-jshint&quot;: &quot;~0.6.0&quot;,\n    &quot;grunt-contrib-nodeunit&quot;: &quot;~0.2.0&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;~0.2.2&quot;\n  }\n}\n</code></pre>\n<p>打开命令行，进入到这个目录下面，输入<code>npm install</code>，安装依赖库；</p>\n<p>安装完依赖库之后，新建一个叫 Gruntfile.js 的文件，并输入以下代码（当然这是官方的 demo）</p>\n<pre><code class=\"language-javascript\">module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: { banner: '/_! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today(&quot;yyyy-mm-dd&quot;) %&gt; _/\\n' },\n      build: { src: 'src/&lt;%= pkg.name %&gt;.js', dest: 'build/&lt;%= pkg.name %&gt;.min.js' },\n    },\n  });\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.registerTask('default', ['uglify']);\n};\n</code></pre>\n<p>按照代码中的提示，在根目录下新建一个 src 和 build 的文件夹，再在 src 文件夹下面新建一个和 name 相同的文件，我得 package.json 的 name 是 gruntjs-again，那就新建一个 gruntjs-again.js 文件。</p>\n<p>回到命令行，输入<code>grunt</code>执行 Gruntfile.js</p>\n<p>就会出现以下的结果</p>\n<p><img src=\"/static/img/gruntjs-usage-1.png\" alt=\"gruntjs-usage\"></p>\n<h4>gruntjs 进阶篇</h4>\n<p>现在是下班时间，大家都走了，组里只剩下我一个，真的很安静，哈哈，感觉挺不错的。</p>\n<p>以下的内容参考了别人的文章：<a href=\"http://www.cnblogs.com/zhepama/archive/2013/05/15/3080736.html\">文章链接</a></p>\n<p>新建一个目录，我这里是 gruntjs，和上面一样，在这个目录下面新建 package.json 文件，输入以下代码：</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;my-gruntjs-project-name&quot;,\n  &quot;author&quot;: &quot;yzh&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;description&quot;: &quot;项目描述神马的&quot;,\n  &quot;dependencies&quot;: {\n    &quot;grunt&quot;: &quot;*&quot;,\n    &quot;grunt-contrib-less&quot;: &quot;*&quot;,\n    &quot;grunt-contrib-watch&quot;: &quot;*&quot;,\n    &quot;grunt-contrib-uglify&quot;: &quot;*&quot;,\n    &quot;grunt-contrib-cssmin&quot;: &quot;*&quot;,\n    &quot;grunt-contrib-copy&quot;: &quot;*&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;grunt&quot;: &quot;~0.4.1&quot;\n  }\n}\n</code></pre>\n<p>以上的 package.json 将会为这个项目添加五个依赖库，分别是</p>\n<ul>\n<li>编译 less 的 grunt-contrib-less；</li>\n<li>监控文件的 grunt-contrib-watch；</li>\n<li>合并并压缩 js 文件的 grunt-contrib-uglify；</li>\n<li>压缩 css 文件的 grunt-contrib-cssmin；</li>\n<li>复制文件的 grunt-contrib-cssmin；</li>\n</ul>\n<p>进入 gruntjs 这个目录，在命令行中，执行<code>npm install</code>执行安装依赖库（这里我就不截图了）</p>\n<p>新建以下一些文件</p>\n<p><img src=\"/static/img/gruntjs-usage-2.png\" alt=\"gruntjs-usage\"></p>\n<p>新建 Gruntfile.js 文件，在 Gruntfile.js 文件输入以下代码</p>\n<pre><code class=\"language-javascript\">module.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n\n    // 编译 LESS 文件\n    less: {\n      compile: {\n        files: {\n          'assets/css/app.css': 'assets/css/app.less',\n        },\n      },\n    },\n\n    // 压缩 CSS 文件\n    cssmin: {\n      options: {\n        report: 'gzip',\n      },\n      combine: {\n        files: {\n          'assets/css/app.min.css': 'assets/css/app.css',\n        },\n      },\n    },\n\n    // 压缩合并 JS 文件\n    uglify: {\n      options: {\n        report: 'gzip',\n        mangle: true, // Specify mangle: false to prevent changes to your variable and function names.\n        banner:\n          '/** \\n' +\n          ' * -------------------------------------------------------------\\n' +\n          ' * @version: &lt;%= pkg.version%&gt; \\n' +\n          ' * @author: &lt;%= pkg.author%&gt; \\n' +\n          ' * @description: &lt;%= pkg.description%&gt; \\n' +\n          ' * ------------------------------------------------------------- \\n' +\n          ' */ \\n\\n',\n      },\n      myTarget: {\n        files: {\n          'assets/js/app.min.js': ['assets/js/app.js', 'assets/js/book.js'],\n\n          'assets/js/lib/libs.min.js': ['assets/js/lib/jquery-1.9.1.js', 'assets/js/lib/sizzle.js'],\n        },\n      },\n    },\n\n    // 复制文件，打包到 dest 文件夹目录下\n    copy: {\n      main: {\n        files: [\n          { src: 'index.html', dest: 'dest/index.html' },\n          { src: ['assets/css/app.min.css'], dest: 'dest/' },\n          { src: ['assets/js/lib/libs.min.js'], dest: 'dest/' },\n          { src: ['assets/js/app.min.js'], dest: 'dest/' },\n        ],\n      },\n    },\n\n    // 监控 LESS 文件\n    watch: {\n      scripts: {\n        files: ['assets/css/*.less'],\n        tasks: ['less', 'cssmin'],\n      },\n    },\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-less');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n\n  grunt.registerTask('default', ['less', 'cssmin', 'uglify', 'copy']);\n};\n</code></pre>\n<p>最后，执行<code>grunt</code>，你会发现 dest 目录下面有 css 目录、js 目录以及 index.html 文件，这些都是 grunt-contrib-copy 在起作用。而在 assets 目录下，你会发现经过压缩的 css 文件，以及经过压缩和合并的 js 文件，这是 cssmin 和 uglify，less 在起作用</p>\n<p>那 watch 有啥用呢？在命令行里面执行<code>grunt watch</code>，当你修改 less 文件的时候，css 和 cssmin 文件都会被修改，这就是我觉得很神奇的地方，这到底是神马原理呢？这估计得以后学了 nodejs 之后才知道了。</p>\n"}}}]);